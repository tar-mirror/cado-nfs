/*****************************************************************************/
/*                   to generate the factoring methods                       */
/*****************************************************************************/

Some binaries are available in this directory :
  1- gfm
  2- benchfm
  3- gst
  4- finalst

For an example of what is described in this README, you can have a look
at the create_strat_file.sh script that does all the steps described
here.

Firstly, gfm allows to choose the optimal parameters (B1, B2) for each
factoring methods (PM1, PP1-27, PP1-65, ECM-M12, ECM-M16, ECM-B12) to
find a prime number in [2^(lb-1), 2^ub]. Potentially, there are
infintely many couples of parameters. So, you can specify the
region that you want to test with several options:
   - b1min, b1_max, b1step
   - cmin, cmax, cstep (where c equal to B2/B1).

Now, you have got your optimal parameters for each type of factoring
methods. In the context of the sieving step, the goal is to define
strategies to find quickly as many relations as possible. Before choosing
these strategies, you must do a benchmark over your factoring methods to
know exatly what is the probability and the cost to find a prime number
of certain bit size.

To do this, the binary benchfm is available. In input, you give a file
with factoring methods, and you can compute the probabilities and/or
the time for each one of them. 

If you consider that you have to many methods, you can use the -f option
of the binary ./benchfm to filter them and keep only the given number of
factoring methods.


output file format :
------------------
One line for each factoring method:
m c B1 B2 | p propa_p proba_(p+1) ...  | c1 c2 c3 c4 |
where:
  - m denotes a type of method and c denotes the curve
    (PM1=1 0, PP1-27=2 0, PP1-65=3 0, ECM-M12=4 2, ECM-M16=4 4, ECM-B12=4 1)
  - B1 et B2 are the parameters of the factoring method.
  - p is the bit size of prime number that we start to bench.
  - proba_i is the probabiliy to find a prime number of i bits size.
  - ci is the runtime for various input sizes:
 (c1 (resp. c2 c3 c4) for an integer to MODREDCUL_MAXBITS, (resp. 
 MODREDC15UL_MAXBITS, MODREDC2UL2_MAXBITS and MODREDC2UL2_MAXBITS+30) bits size.



/*****************************************************************************/
/*                       to generate the strategies                          */
/*****************************************************************************/

Now that you have generated the factoring methods, you must chain them
to optain the best performance. In order to do that, you can use the
binary gst to build the optimal strategies for each pair of bit
lengths. 

First, this program works on each side independatly. On each side, for
each bit size of cofactor, you generate many strategies and keep only the
best ones. After these different computations, it merges them to generate
on each pair of cofactors the best strategies to find a prime divisor.

Let's give an example.

First, you should precompute all decompositions of cofactors of less than
mfb bits given that it has no prime divisors less than fbb. To do it,
assuming you have created a directory decomp_tmp/:

#524288 = 2^19
./gst -gdc -lim0 524288 -mfb0 39 -out decomp_tmp/decomp_524288_39
# Note the product of two 20-bit primes can have 39 or 40 bits
./gst -gdc -lim0 524288 -mfb0 40 -out decomp_tmp/decomp_524288_40
cat decomp_tmp/decomp_524288_40
[ 20, 20 ] : 451299262.762625
[ 20, 21 ] : 1122087524.990350
./gst -gdc -lim0 524288 -mfb0 41 -out decomp_tmp/decomp_524288_41
./gst -gdc -lim0 524288 -mfb0 42 -out decomp_tmp/decomp_524288_42
./gst -gdc -lim0 524288 -mfb0 43 -out decomp_tmp/decomp_524288_43
etc ... until mfb.

Secondly, you should distribute the precomputation of strategies for each
size and side.

Note that the resulting files are stored in the directory 'out' and the
convention for the filenames is: strategies$lim_$r, where lim is the factor
base bound and r the bit size of the cofactor.

Then, you merge the results to compute the matrix which stores the
differents strategies for each pair of bit sizes.

Note that the format name of files is: strategies_r0_r1, where r0 and r1
are the bit sizes of the studied pair of cofactors (r0,r1).

Note that: Without options '-gst' or '-gst_r' the binary 'gst'
computes the matrix of strategies without precompution. For more
information, see the function generate_matrix() in
generate_strategies.c.

output file format :
------------------
m  c  b1  b2  side
m' c' b1' b2' side' 
etc...
probability: p
time: t
etc ... for each strategy.

with: m the factoring method
      c the curve
      b1 and b2 the parameters
      side is the side where one applies this factoring method.
      p and t the probability and the time to find a non
      trivial factor in the cofactor.


/******************************************************************************/
/*                        to find THE good strategy                           */
/******************************************************************************/
Now, we have for each pair of cofactors (r0,r1) a set of
strategies. But the question is : Which strategy shall we use to
factor (r0,r1) ?  In order to reply to that question, we have used
Kleinjung's observations (see his article named 'Cofactorisation
strategies for the number Field sieve and an estimate for the sieving
step for factoring 1024-bit integers');

To do that, the binary 'finalst' is available.  

./finalst -st res_matrix/ -dist cofactors.stats -t 137.07 -mfb0 90 -mfb1 90 -out final_st

Where: res_matrix/ is the directory which contains our strategies.
       cofactors.stats    is a file generated by cado-nfs containing the
                          distribution of our cofactors pairs (see below)
       137.07      is the time (seconds) which allows to obtain the
                   previous pairs of cofactors.

To optain 'cofactors.stats' and '137.07', one uses las with the option
'-stats-cofact' followed by the name of the output file.

For example, if one runs las with: 
./makefb -poly rsa155.poly -lim 16777216 -maxbits 13 -out rsa155.roots
./las -I 14 -poly rsa155.poly -q0 30000100 -q1 30000500 -lim0 16777216
-lim1 16777216 -lpb0 29 -lpb1 29 -mfb0 90 -mfb1 90 -mt 1 -stats-cofact
cofactors.stats -fb1 rsa155.roots

one obtains:
# Total cpu time 373.77s [norm 0.29+1.3, sieving 81.9
(37.7 + 4.4 + 39.8), factor 290.2 (53.5 + 236.7)]

The time to obtain our cofactors is equal to: 373.77-236.7 = 137.07 s


file format for our result 'final_st':
-----------
For each bit-size pair (r0,r1) which is called in CADO, you have for example:

[r0=1, r1=61] : (p = 0.999446, t = 483.845263)
[ S1: PM1, 950, 123500 ] [ S1: PP1-65, 975, 107250 ] [ S1: ECM-M16, 600, 144000 ]
[ S1: ECM-M12, 600, 168000 ] [ S1: ECM-M12, 600, 168000 ] 
[ S1: ECM-M12, 600, 168000 ] [ S0: ECM-B12, 0, 0 ]

where: 

(r0,r1) specifies the bit size of cofactors.  

p is the probability to find a relation with this strategy 
and t the average runtime.  

And each [S: m, b1, b2] is a factoring method given by the
method m and these parameters b1 and b2, and S is the side where
this factoring method is apply (S0 for r0 and S1 for r1).

