------------------------------------------------------------------------
WARNING: This walk-through example script might be broken, since the
command-line options of the binaries changed a bit since it was written.
The general idea is still valid.
------------------------------------------------------------------------

Steps to produce a strategy-file for a rsa704

Polynomial file (from params/rsa704.poly)
n: 74037563479561712828046796097429573142593188889231289084936232638972765034028266276891996419625117843995894330502127585370118968098286733173273108930900552505116877063299072396380786710086096962537934650563796359
skew: 2159616.00
c6: 10614120
c5: 62813641710611
c4: 1938361239259842311964
c3: 931957113890545875115664715
c2: -11187228497714282733145127980606483
c1: 275791344247583495761263211927712634450
c0: 631618785519411550157074523461307229101210175
Y1: 1701314346829200310007393599
Y0: -10040119372014939875708192394943108
# lognorm: 60.65, alpha: -9.46, (alpha_proj: -1.90) E: 51.19, nr: 4
# MurphyE: 9.55e-16 (Bf=10000000, Bg=5000000, area=1.00e+16)

Parameters:

lim0: 250000000
lim1: 500000000
lpb0: 33
lpb1: 33
mfb0: 66
mfb1: 99
lambda0: 2.1
lambda1: 3.2


#select our factoring methods
./script_fm.sh 28 33

cat pm1_* > data_pm1
./gfm -fch -fch_in data_pm1 -fch_out data_pm1_ch

cat pp1_27_* > data_pp1_27
./gfm -fch -fch_in data_pp1_27 -fch_out data_pp1_27_ch

cat pp1_65_* > data_pp1_65
./gfm -fch -fch_in data_pp1_65 -fch_out data_pp1_65_ch

cat ecm_m12_* > data_ecm_m12
./gfm -fch -fch_in data_ecm_m12 -fch_out data_ecm_m12_ch

cat ecm_m16_* > data_ecm_m16
./gfm -fch -fch_in data_ecm_m16 -fch_out data_ecm_m16_ch

cat ecm_b12_* > data_ecm_b12
./gfm -fch -fch_in data_ecm_b12 -fch_out data_ecm_b12_ch

#bench our factoring methods
./benchfm -in data_pm1_ch -p -t -lb 28 -out data_pm1_pt  &
./benchfm -in data_pp1_27_ch -p -t -lb 28 -out data_pp1_27_pt  &
./benchfm -in data_pp1_65_ch -p -t -lb 28 -out data_pp1_65_pt  &
./benchfm -in data_ecm_b12_ch -p -t -lb 28 -out data_ecm_b12_pt  &
./benchfm -in data_ecm_m12_ch -p -t -lb 28 -out data_ecm_m12_pt  &
./benchfm -in data_ecm_m16_ch -p -t -lb 28 -out data_ecm_m16_pt

#filtering step!  just to have few factoring methods (10 PM1, 10 PP1,
#10 EC_M16, 10 EC_RC (curve B12 or M12))
cat data_pp1_65_pt data_pp1_27_pt > data_pp1_pt
cat data_ecm_m12_pt data_ecm_b12_pt > data_ecm_rc_pt

./benchfm -f 10 -in data_ecm_rc_pt -out ecm_rc
./benchfm -f 10 -in data_ecm_m16_pt -out ecm_m16
./benchfm -f 10 -in data_pm1_pt -out pm1
./benchfm -f 10 -in data_pp1_pt -out pp1

cat pm1 pp1 ecm_rc ecm_m16 > All_methods

#precompite our decompositions
mkdir decomp
./script_gen_dec.sh 250000000 55 66
./script_gen_dec.sh 500000000 57 99


#create strategies for one length!
mkdir res_precompt_st
./script_str_r.sh 250000000 33 0 20 20 decomp All_methods res_precompt_st
./script_str_r.sh 250000000 33 21 40 20 decomp All_methods res_precompt_st
./script_str_r.sh 250000000 33 41 66 20 decomp All_methods res_precompt_st
./script_str_r.sh 500000000 33 0  20 20 decomp All_methods res_precompt_st
./script_str_r.sh 500000000 33 21 40 20 decomp All_methods res_precompt_st
./script_str_r.sh 500000000 33 41 60 20 decomp All_methods res_precompt_st
./script_str_r.sh 500000000 33 61 80 20 decomp All_methods res_precompt_st
./script_str_r.sh 500000000 33 81 99 20 decomp All_methods res_precompt_st

#create strategies for all couple of one length!
mkdir res_matrix
./script_str.sh 250000000 66 500000000 99 res_precompt_st res_matrix

#collect a sample of the distribution of the pairs of cofactors.
./makefb -poly rsa704.poly -lim 500000000 -maxbits 15 -out rsa704.roots
./las -I 16 -poly rsa704.poly -q0 1000000000 -q1 1000000700 -lim0 250000000 -lim1 500000000 -lpb0 33 -lpb1 33 -mfb0 66 -mfb1 99 -mt 1 -stats-cofact cofactors.stats -fb1 rsa704.roots
# Total cpu time 2303.31s [norm 3.34+8.8, sieving 1849.9 (1121.3 + 106.4 + 622.2), factor 441.3 (357.5 + 83.8)]
# Total elapsed time 2309.08s, per special-q 76.9694s, per relation 5.70143s
# Total 405 reports [5.69s/r, 13.5r/sq]

#emulator
./finalst -st res_matrix -dist cofactors.stats -t 2220 -mfb0 66 -mfb1 99 -out final_st
 Y = 387.309302 relations, T = 2245.233974 s., yt = 5.7970050381 s/rel.

#in practice:
./las -I 16 -poly rsa704.poly -q0 1000000000 -q1 1000000700 -lim0 250000000 -lim1 500000000 -lpb0 33 -lpb1 33 -mfb0 66 -mfb1 99 -mt 1 -fb1 rsa704.roots -file-cofact final_st
# Total cpu time 2242.31s [norm 3.22+8.9, sieving 1847.5 (1119.5 + 106.9 + 621.0), factor 382.8 (357.1 + 25.7)]
# Total elapsed time 2246.51s, per special-q 74.8837s, per relation 5.54694s
# Total 404 reports [5.57s/r, 13.5r/sq]


#Note that with parameter mfb0 = 99, and the same procedure to generate a strategy file, we obtain:
                                emulator
Y = 424.428310 relations, T = 2407.373605 s., yt = 5.6720382455 s/rel.
                                in practice!!!
# Total cpu time 2414.18s [norm 3.59+9.7, sieving 1916.8 (1120.8 + 107.0 + 689.1), factor 484.1 (434.4 + 49.7)]
# Total elapsed time 2431.19s, per special-q 81.0396s, per relation 5.4389s
# Total 447 reports [5.4s/r, 14.9r/sq]
(So a speed-up: 5% for the time per relation and
                10% for the number of relations per special-q).
		
