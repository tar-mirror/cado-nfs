diff --git a/fft/mpfq/i386/mpfq_2_128.h b/fft/mpfq/i386/mpfq_2_128.h
index 3303453..cebb490 100644
--- a/fft/mpfq/i386/mpfq_2_128.h
+++ b/fft/mpfq/i386/mpfq_2_128.h
@@ -3,6 +3,9 @@
 
 /* MPFQ generated file -- do not edit */
 
+#include "gf2x.h"
+#include "gf2x/gf2x-small.h"
+
 #include "mpfq.h"
 #include "mpfq_gf2n_common.h"
 #include <stdio.h>
@@ -11,9 +14,9 @@
 #include <assert.h>
 #include <stdint.h>
 #include <ctype.h>
-#include <emmintrin.h>
 #include <stddef.h>
 #include <stdio.h>
+
 #include "assert.h"
 #ifdef	MPFQ_LAST_GENERATED_TAG
 #undef	MPFQ_LAST_GENERATED_TAG
@@ -943,136 +946,7 @@ void mpfq_2_128_elt_ur_add(mpfq_2_128_dst_field K MAYBE_UNUSED, mpfq_2_128_dst_e
 static inline
 void mpfq_2_128_mul_ur(mpfq_2_128_dst_field K MAYBE_UNUSED, mpfq_2_128_dst_elt_ur t, mpfq_2_128_src_elt s1, mpfq_2_128_src_elt s2)
 {
-    /* 128x128 basecase slice=4 slicenet=sequence sse2=64 w=32 */
-#define SHL(x, r) _mm_slli_epi64((x), (r))
-#define SHR(x, r) _mm_srli_epi64((x), (r))
-#define SHLD(x, r) _mm_slli_si128((x), (r) >> 3)
-#define SHRD(x, r) _mm_srli_si128((x), (r) >> 3)
-    /* s2_input_elements: s2[0] s2[1] s2[2] s2[3] */
-    __m128i u;
-    __m128i t0;
-    __m128i t1;
-    __m128i t2;
-    
-    __m128i g[16];
-    /* sequence update walk */
-    g[0] = _mm_setzero_si128();
-    g[1] = _mm_set_epi32(s2[3], s2[2], s2[1], s2[0]);
-    g[2] = SHL(g[1], 1);
-    g[3] = g[2] ^ g[1];
-    g[4] = SHL(g[2], 1);
-    g[5] = g[4] ^ g[1];
-    g[6] = SHL(g[3], 1);
-    g[7] = g[6] ^ g[1];
-    g[8] = SHL(g[4], 1);
-    g[9] = g[8] ^ g[1];
-    g[10] = SHL(g[5], 1);
-    g[11] = g[10] ^ g[1];
-    g[12] = SHL(g[6], 1);
-    g[13] = g[12] ^ g[1];
-    g[14] = SHL(g[7], 1);
-    g[15] = g[14] ^ g[1];
-    
-    /* round 0 */
-    u = g[s1[0]       & 15];
-    t0  = u;
-    u = g[s1[0] >>  4 & 15];
-    t0 ^= SHL(u,  4); t1  = SHR(u, 60);
-    u = g[s1[0] >>  8 & 15];
-    t0 ^= SHL(u,  8); t1 ^= SHR(u, 56);
-    u = g[s1[0] >> 12 & 15];
-    t0 ^= SHL(u, 12); t1 ^= SHR(u, 52);
-    u = g[s1[0] >> 16 & 15];
-    t0 ^= SHL(u, 16); t1 ^= SHR(u, 48);
-    u = g[s1[0] >> 20 & 15];
-    t0 ^= SHL(u, 20); t1 ^= SHR(u, 44);
-    u = g[s1[0] >> 24 & 15];
-    t0 ^= SHL(u, 24); t1 ^= SHR(u, 40);
-    u = g[s1[0] >> 28 & 15];
-    t0 ^= SHL(u, 28); t1 ^= SHR(u, 36);
-    u = g[s1[1]       & 15];
-    t0 ^= SHL(u, 32); t1 ^= SHR(u, 32);
-    u = g[s1[1] >>  4 & 15];
-    t0 ^= SHL(u, 36); t1 ^= SHR(u, 28);
-    u = g[s1[1] >>  8 & 15];
-    t0 ^= SHL(u, 40); t1 ^= SHR(u, 24);
-    u = g[s1[1] >> 12 & 15];
-    t0 ^= SHL(u, 44); t1 ^= SHR(u, 20);
-    u = g[s1[1] >> 16 & 15];
-    t0 ^= SHL(u, 48); t1 ^= SHR(u, 16);
-    u = g[s1[1] >> 20 & 15];
-    t0 ^= SHL(u, 52); t1 ^= SHR(u, 12);
-    u = g[s1[1] >> 24 & 15];
-    t0 ^= SHL(u, 56); t1 ^= SHR(u,  8);
-    u = g[s1[1] >> 28 & 15];
-    t0 ^= SHL(u, 60); t1 ^= SHR(u,  4);
-    
-    /* round 1 */
-    u = g[s1[2]       & 15];
-    t1 ^= u;
-    u = g[s1[2] >>  4 & 15];
-    t1 ^= SHL(u,  4); t2  = SHR(u, 60);
-    u = g[s1[2] >>  8 & 15];
-    t1 ^= SHL(u,  8); t2 ^= SHR(u, 56);
-    u = g[s1[2] >> 12 & 15];
-    t1 ^= SHL(u, 12); t2 ^= SHR(u, 52);
-    u = g[s1[2] >> 16 & 15];
-    t1 ^= SHL(u, 16); t2 ^= SHR(u, 48);
-    u = g[s1[2] >> 20 & 15];
-    t1 ^= SHL(u, 20); t2 ^= SHR(u, 44);
-    u = g[s1[2] >> 24 & 15];
-    t1 ^= SHL(u, 24); t2 ^= SHR(u, 40);
-    u = g[s1[2] >> 28 & 15];
-    t1 ^= SHL(u, 28); t2 ^= SHR(u, 36);
-    u = g[s1[3]       & 15];
-    t1 ^= SHL(u, 32); t2 ^= SHR(u, 32);
-    u = g[s1[3] >>  4 & 15];
-    t1 ^= SHL(u, 36); t2 ^= SHR(u, 28);
-    u = g[s1[3] >>  8 & 15];
-    t1 ^= SHL(u, 40); t2 ^= SHR(u, 24);
-    u = g[s1[3] >> 12 & 15];
-    t1 ^= SHL(u, 44); t2 ^= SHR(u, 20);
-    u = g[s1[3] >> 16 & 15];
-    t1 ^= SHL(u, 48); t2 ^= SHR(u, 16);
-    u = g[s1[3] >> 20 & 15];
-    t1 ^= SHL(u, 52); t2 ^= SHR(u, 12);
-    u = g[s1[3] >> 24 & 15];
-    t1 ^= SHL(u, 56); t2 ^= SHR(u,  8);
-    u = g[s1[3] >> 28 & 15];
-    t1 ^= SHL(u, 60); t2 ^= SHR(u,  4);
-    /* end */
-    
-    /* repair steps */
-    /* repair section 200711-200803 */
-    __m128i v1 = _mpfq_mm_setr_epi32(s1[0], s1[1], s1[0], s1[1]);
-    v1 = SHR(v1, 1);
-    __m128i v2 = _mpfq_mm_setr_epi32(s1[2], s1[3], s1[2], s1[3]);
-    v2 = SHR(v2, 1);
-    __m128i w;
-    __m128i m = _mpfq_mm_setr_epi32_c(0x77777777, 0x77777777, 0x77777777, 0x77777777);
-    w = -SHR(g[1],63);
-    v1 = v1 & m;
-    t1 ^= v1 & w;
-    v2 = v2 & m;
-    t2 ^= v2 & w;
-    w = -SHR(g[2],63);
-    v1 = SHR(v1, 1) & m;
-    t1 ^= v1 & w;
-    v2 = SHR(v2, 1) & m;
-    t2 ^= v2 & w;
-    w = -SHR(g[4],63);
-    v1 = SHR(v1, 1) & m;
-    t1 ^= v1 & w;
-    v2 = SHR(v2, 1) & m;
-    t2 ^= v2 & w;
-    
-    /* store result */
-    _mm_storeu_si128((__m128i *) (t + 0), _mm_xor_si128(t0, SHLD(t1, 64)));
-    _mm_storeu_si128((__m128i *) (t + 4), _mm_xor_si128(t2, SHRD(t1, 64)));
-#undef SHL
-#undef SHR
-#undef SHLD
-#undef SHRD
+    gf2x_mul4(t, s1, s2);
 }
 
 /* *Mpfq::gf2n::squaring::code_for_sqr_ur */
diff --git a/fft/mpfq/i386/mpfq_2_64.h b/fft/mpfq/i386/mpfq_2_64.h
index 2e570c7..ce36ed3 100644
--- a/fft/mpfq/i386/mpfq_2_64.h
+++ b/fft/mpfq/i386/mpfq_2_64.h
@@ -3,6 +3,9 @@
 
 /* MPFQ generated file -- do not edit */
 
+#include "gf2x.h"
+#include "gf2x/gf2x-small.h"
+
 #include "mpfq.h"
 #include "mpfq_gf2n_common.h"
 #include <stdio.h>
@@ -11,9 +14,9 @@
 #include <assert.h>
 #include <stdint.h>
 #include <ctype.h>
-#include <emmintrin.h>
 #include <stddef.h>
 #include <stdio.h>
+
 #include "assert.h"
 #ifdef	MPFQ_LAST_GENERATED_TAG
 #undef	MPFQ_LAST_GENERATED_TAG
@@ -867,92 +870,7 @@ void mpfq_2_64_elt_ur_add(mpfq_2_64_dst_field K MAYBE_UNUSED, mpfq_2_64_dst_elt_
 static inline
 void mpfq_2_64_mul_ur(mpfq_2_64_dst_field K MAYBE_UNUSED, mpfq_2_64_dst_elt_ur t, mpfq_2_64_src_elt s1, mpfq_2_64_src_elt s2)
 {
-    /* 64x64 basecase slice=4 slicenet=sequence sse2=64 w=32 */
-#define SHL(x, r) _mm_slli_epi64((x), (r))
-#define SHR(x, r) _mm_srli_epi64((x), (r))
-#define SHLD(x, r) _mm_slli_si128((x), (r) >> 3)
-#define SHRD(x, r) _mm_srli_si128((x), (r) >> 3)
-    /* s2_input_elements: s2[0] s2[1] 0 0 */
-    __m128i u;
-    __m128i t0;
-    __m128i t1;
-    
-    __m128i g[16];
-    /* sequence update walk */
-    g[0] = _mm_setzero_si128();
-    g[1] = _mm_set_epi32(0, 0, s2[1], s2[0]);
-    g[2] = SHL(g[1], 1);
-    g[3] = g[2] ^ g[1];
-    g[4] = SHL(g[2], 1);
-    g[5] = g[4] ^ g[1];
-    g[6] = SHL(g[3], 1);
-    g[7] = g[6] ^ g[1];
-    g[8] = SHL(g[4], 1);
-    g[9] = g[8] ^ g[1];
-    g[10] = SHL(g[5], 1);
-    g[11] = g[10] ^ g[1];
-    g[12] = SHL(g[6], 1);
-    g[13] = g[12] ^ g[1];
-    g[14] = SHL(g[7], 1);
-    g[15] = g[14] ^ g[1];
-    
-    /* round 0 */
-    u = g[s1[0]       & 15];
-    t0  = u;
-    u = g[s1[0] >>  4 & 15];
-    t0 ^= SHL(u,  4); t1  = SHR(u, 60);
-    u = g[s1[0] >>  8 & 15];
-    t0 ^= SHL(u,  8); t1 ^= SHR(u, 56);
-    u = g[s1[0] >> 12 & 15];
-    t0 ^= SHL(u, 12); t1 ^= SHR(u, 52);
-    u = g[s1[0] >> 16 & 15];
-    t0 ^= SHL(u, 16); t1 ^= SHR(u, 48);
-    u = g[s1[0] >> 20 & 15];
-    t0 ^= SHL(u, 20); t1 ^= SHR(u, 44);
-    u = g[s1[0] >> 24 & 15];
-    t0 ^= SHL(u, 24); t1 ^= SHR(u, 40);
-    u = g[s1[0] >> 28 & 15];
-    t0 ^= SHL(u, 28); t1 ^= SHR(u, 36);
-    u = g[s1[1]       & 15];
-    t0 ^= SHL(u, 32); t1 ^= SHR(u, 32);
-    u = g[s1[1] >>  4 & 15];
-    t0 ^= SHL(u, 36); t1 ^= SHR(u, 28);
-    u = g[s1[1] >>  8 & 15];
-    t0 ^= SHL(u, 40); t1 ^= SHR(u, 24);
-    u = g[s1[1] >> 12 & 15];
-    t0 ^= SHL(u, 44); t1 ^= SHR(u, 20);
-    u = g[s1[1] >> 16 & 15];
-    t0 ^= SHL(u, 48); t1 ^= SHR(u, 16);
-    u = g[s1[1] >> 20 & 15];
-    t0 ^= SHL(u, 52); t1 ^= SHR(u, 12);
-    u = g[s1[1] >> 24 & 15];
-    t0 ^= SHL(u, 56); t1 ^= SHR(u,  8);
-    u = g[s1[1] >> 28 & 15];
-    t0 ^= SHL(u, 60); t1 ^= SHR(u,  4);
-    /* end */
-    
-    /* repair steps */
-    /* repair section 200711-200803 */
-    __m128i v1 = _mpfq_mm_setr_epi32(s1[0], s1[1], s1[0], s1[1]);
-    v1 = SHR(v1, 1);
-    __m128i w;
-    __m128i m = _mpfq_mm_setr_epi32_c(0x77777777, 0x77777777, 0x77777777, 0x77777777);
-    w = -SHR(g[1],63);
-    v1 = v1 & m;
-    t1 ^= v1 & w;
-    w = -SHR(g[2],63);
-    v1 = SHR(v1, 1) & m;
-    t1 ^= v1 & w;
-    w = -SHR(g[4],63);
-    v1 = SHR(v1, 1) & m;
-    t1 ^= v1 & w;
-    
-    /* store result */
-    _mm_storeu_si128((__m128i *) (t + 0), _mm_xor_si128(t0, SHLD(t1, 64)));
-#undef SHL
-#undef SHR
-#undef SHLD
-#undef SHRD
+    gf2x_mul2(t, s1, s2);
 }
 
 /* *Mpfq::gf2n::squaring::code_for_sqr_ur */
diff --git a/fft/mpfq/mpfq.h b/fft/mpfq/mpfq.h
index 4ba2b9f..3d7717a 100644
--- a/fft/mpfq/mpfq.h
+++ b/fft/mpfq/mpfq.h
@@ -8,7 +8,10 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <gmp.h>
+
+#ifndef GF2X_WORDSIZE
+#error "This file has been modified for use within gf2x. Please arrange so that gf2x-small.h is included before this file"
+#endif
 
 #ifdef __cplusplus
 extern "C" {
@@ -19,43 +22,23 @@ extern "C" {
 /*** Constants for field_specify ***/
 
 #define MPFQ_DONE 0             /* At the end of the variadic option functions */
-#define MPFQ_PRIME_MPN 1        /* mp_limb_t *, size depending on implementation. Prefer MPFQ_PRIME_MPZ */
+// #define MPFQ_PRIME_MPN 1        /* mp_limb_t *, size depending on implementation. Prefer MPFQ_PRIME_MPZ */
 #define MPFQ_POLYNOMIAL 2       /* this expects an mpfq polynomial */
 #define MPFQ_DEGREE 3           /* int */
 #define MPFQ_IO_TYPE 4          /* for setopt */
 #define MPFQ_GROUPSIZE 5        /* int (SIMD group size) */
-#define MPFQ_PRIME_MPZ 6        /* mpz_t */
+// #define MPFQ_PRIME_MPZ 6        /* mpz_t */
 #define MPFQ_MANDATORY_TAG 7    /* force the tag to be this one ; this is
                                  * of course pointless for the low-level
                                  * implementation, but
                                  * mpfq_vbase_oo_field_init_byfeatures
                                  * uses it. */
 
-#define BUILD_BITMASK(x) ((x) == GMP_LIMB_BITS ? ((mp_limb_t) - 1) : (~ - ((mp_limb_t) 1 << (x))))
-
 #define LEXGE2(X,Y,A,B) (X>A || (X == A && Y >= B))
 #define LEXGE3(X,Y,Z,A,B,C) (X>A || (X == A && LEXGE2(Y,Z,B,C)))
 #define LEXLE2(X,Y,A,B) LEXGE2(A,B,X,Y)
 #define LEXLE3(X,Y,Z,A,B,C) LEXGE3(A,B,C,X,Y,Z)
 
-#ifndef GMP_VERSION_ATLEAST
-#ifndef __GNU_MP_VERSION
-#define GMP_VERSION_ATLEAST(X,Y,Z) 0
-#else
-#define GMP_VERSION_ATLEAST(X,Y,Z)     \
-LEXGE3(__GNU_MP_VERSION,__GNU_MP_VERSION_MINOR,__GNU_MP_VERSION_PATCHLEVEL,X,Y,Z)
-#endif
-#endif
-
-#ifndef GMP_VERSION_ATMOST
-#ifndef __GNU_MP_VERSION
-#define GMP_VERSION_ATMOST(X,Y,Z) 1
-#else
-#define GMP_VERSION_ATMOST(X,Y,Z)     \
-LEXLE3(__GNU_MP_VERSION,__GNU_MP_VERSION_MINOR,__GNU_MP_VERSION_PATCHLEVEL,X,Y,Z)
-#endif
-#endif
-
 #ifndef GNUC_VERSION
 #ifndef __GNUC__
 #define GNUC_VERSION(X,Y,Z) 0
@@ -138,24 +121,24 @@ static inline int mpfq_clzl(unsigned long x)
         static const int t[4] = { 2, 1, 0, 0 };
         int a = 0;
         int res;
-#if (GMP_LIMB_BITS == 64)
+#if (GF2X_WORDSIZE == 64)
         if (x >> 32) { a += 32; x >>= 32; }
 #endif  
         if (x >> 16) { a += 16; x >>= 16; }
         if (x >>  8) { a +=  8; x >>=  8; }
         if (x >>  4) { a +=  4; x >>=  4; }
         if (x >>  2) { a +=  2; x >>=  2; }
-        res = GMP_LIMB_BITS - 2 - a + t[x];
+        res = GF2X_WORDSIZE - 2 - a + t[x];
         return res;
 }
 static inline int mpfq_ctzl(unsigned long x)
 {
-	return GMP_LIMB_BITS - mpfq_clzl(x & - x);
+	return GF2X_WORDSIZE - mpfq_clzl(x & - x);
 }
 static inline int mpfq_parityl(unsigned long x)
 {
 	static const int t[4] = { 0, 1, 1, 0, };
-#if (GMP_LIMB_BITS == 64)
+#if (GF2X_WORDSIZE == 64)
 	x ^= (x >> 32);
 #endif
 	x ^= (x >> 16);
@@ -186,7 +169,7 @@ static inline int mpfq_parityl(unsigned long x)
 static inline int mpfq_clzlx(unsigned long * x, int n)
 {
 	int r = 0;
-	for( ; n > 0 && MPFQ_UNLIKELY(!x[n-1]) ; --n) r+=GMP_LIMB_BITS;
+	for( ; n > 0 && MPFQ_UNLIKELY(!x[n-1]) ; --n) r+=GF2X_WORDSIZE;
 	if (n == 0) return r;
 	r += mpfq_clzl(x[n-1]);
 	return r;
@@ -195,7 +178,7 @@ static inline int mpfq_clzlx(unsigned long * x, int n)
 static inline int mpfq_ctzlx(unsigned long * x, int n)
 {
 	int r = 0;
-	for( ; n > 0 && MPFQ_UNLIKELY(!*x) ; --n,++x) r+=GMP_LIMB_BITS;
+	for( ; n > 0 && MPFQ_UNLIKELY(!*x) ; --n,++x) r+=GF2X_WORDSIZE;
 	if (n == 0) return r;
 	r += mpfq_ctzl(*x);
 	return r;
@@ -242,6 +225,8 @@ static inline void malloc_failed() {
 }
 
 
+#if 0
+
 /* Given the fact that copies are always very small, we're probably
  * better off giving the compiler the opportunity to optimize all this
  * away.
@@ -270,6 +255,7 @@ static inline void mpfq_zero(mp_limb_t * dst, mp_size_t n) {
     for( ; n-- ; ) *dst++ = 0;
 }
 
+#endif
 
 
 #ifdef __cplusplus
diff --git a/fft/mpfq/x86_64/mpfq_2_128.h b/fft/mpfq/x86_64/mpfq_2_128.h
index edb7cf7..575f51c 100644
--- a/fft/mpfq/x86_64/mpfq_2_128.h
+++ b/fft/mpfq/x86_64/mpfq_2_128.h
@@ -3,6 +3,9 @@
 
 /* MPFQ generated file -- do not edit */
 
+#include "gf2x.h"
+#include "gf2x/gf2x-small.h"
+
 #include "mpfq.h"
 #include "mpfq_gf2n_common.h"
 #include <stdio.h>
@@ -11,9 +14,9 @@
 #include <assert.h>
 #include <stdint.h>
 #include <ctype.h>
-#include <emmintrin.h>
 #include <stddef.h>
 #include <stdio.h>
+
 #include "assert.h"
 #ifdef	MPFQ_LAST_GENERATED_TAG
 #undef	MPFQ_LAST_GENERATED_TAG
@@ -939,94 +942,7 @@ void mpfq_2_128_elt_ur_add(mpfq_2_128_dst_field K MAYBE_UNUSED, mpfq_2_128_dst_e
 static inline
 void mpfq_2_128_mul_ur(mpfq_2_128_dst_field K MAYBE_UNUSED, mpfq_2_128_dst_elt_ur t, mpfq_2_128_src_elt s1, mpfq_2_128_src_elt s2)
 {
-#define SHL(x, r) _mm_slli_epi64((x), (r))
-#define SHR(x, r) _mm_srli_epi64((x), (r))
-#define SHLD(x, r) _mm_slli_si128((x), (r) >> 3)
-#define SHRD(x, r) _mm_srli_si128((x), (r) >> 3)
-#define XOREQ(lop, rop) lop = _mm_xor_si128((lop), (rop))
-#define PXOR(lop, rop) _mm_xor_si128((lop), (rop))
-#define PAND(lop, rop) _mm_and_si128((lop), (rop))
-    
-        __m128i u;
-        __m128i t0;
-        __m128i t1;
-        __m128i t2;
-    
-        __m128i g[16];
-        __m128i w;
-        // __m128i m = _mm_set1_epi32(0xeeeeeeee);
-        __m128i m = _mpfq_mm_set1_epi64_c(0xeeeeeeeeeeeeeeee);
-        /* sequence update walk */
-        __m128i b0 = _mm_loadu_si128((__m128i*) s2);
-        g[ 0] = _mm_setzero_si128();
-        g[ 1] = b0;
-        __m128i v1 = _mm_loadu_si128((__m128i*) s1);
-        w = _mm_sub_epi64(_mm_setzero_si128(), SHR(b0,63));
-        __m128i v2 = _mm_unpackhi_epi64(v1, v1);
-        v1 = _mm_unpacklo_epi64(v1, v1);
-        v1 = SHR(PAND(v1, m), 1); t1 = PAND(v1, w);
-        g[ 2] = SHL(b0, 1); g[ 3] = PXOR(g[ 2], b0);
-        v2 = SHR(PAND(v2, m), 1); t2 = PAND(v2, w);
-        g[ 4] = SHL(g[ 2], 1); g[ 5] = PXOR(g[ 4], b0);
-        w = _mm_sub_epi64(_mm_setzero_si128(), SHR(g[ 2],63));
-        g[ 6] = SHL(g[ 3], 1); g[ 7] = PXOR(g[ 6], b0);
-        v1 = SHR(PAND(v1, m), 1); XOREQ(t1, PAND(v1, w));
-        g[ 8] = SHL(g[ 4], 1); g[ 9] = PXOR(g[ 8], b0);
-        v2 = SHR(PAND(v2, m), 1); XOREQ(t2, PAND(v2, w));
-        g[10] = SHL(g[ 5], 1); g[11] = PXOR(g[10], b0);
-        w = _mm_sub_epi64(_mm_setzero_si128(), SHR(g[4],63));
-        g[12] = SHL(g[ 6], 1); g[13] = PXOR(g[12], b0);
-        v1 = SHR(PAND(v1, m), 1); XOREQ(t1, PAND(v1, w));
-        g[14] = SHL(g[ 7], 1); g[15] = PXOR(g[14], b0);
-        v2 = SHR(PAND(v2, m), 1); XOREQ(t2, PAND(v2, w));
-    
-    
-        /* round 0 */
-        u = g[s1[0]       & 15]; t0  = u;
-        u = g[s1[0] >>  4 & 15]; XOREQ(t0, SHL(u,  4)); XOREQ(t1, SHR(u, 60));
-        u = g[s1[0] >>  8 & 15]; XOREQ(t0, SHL(u,  8)); XOREQ(t1, SHR(u, 56));
-        u = g[s1[0] >> 12 & 15]; XOREQ(t0, SHL(u, 12)); XOREQ(t1, SHR(u, 52));
-        u = g[s1[0] >> 16 & 15]; XOREQ(t0, SHL(u, 16)); XOREQ(t1, SHR(u, 48));
-        u = g[s1[0] >> 20 & 15]; XOREQ(t0, SHL(u, 20)); XOREQ(t1, SHR(u, 44));
-        u = g[s1[0] >> 24 & 15]; XOREQ(t0, SHL(u, 24)); XOREQ(t1, SHR(u, 40));
-        u = g[s1[0] >> 28 & 15]; XOREQ(t0, SHL(u, 28)); XOREQ(t1, SHR(u, 36));
-        u = g[s1[0] >> 32 & 15]; XOREQ(t0, SHL(u, 32)); XOREQ(t1, SHR(u, 32));
-        u = g[s1[0] >> 36 & 15]; XOREQ(t0, SHL(u, 36)); XOREQ(t1, SHR(u, 28));
-        u = g[s1[0] >> 40 & 15]; XOREQ(t0, SHL(u, 40)); XOREQ(t1, SHR(u, 24));
-        u = g[s1[0] >> 44 & 15]; XOREQ(t0, SHL(u, 44)); XOREQ(t1, SHR(u, 20));
-        u = g[s1[0] >> 48 & 15]; XOREQ(t0, SHL(u, 48)); XOREQ(t1, SHR(u, 16));
-        u = g[s1[0] >> 52 & 15]; XOREQ(t0, SHL(u, 52)); XOREQ(t1, SHR(u, 12));
-        u = g[s1[0] >> 56 & 15]; XOREQ(t0, SHL(u, 56)); XOREQ(t1, SHR(u,  8));
-        u = g[s1[0] >> 60 & 15]; XOREQ(t0, SHL(u, 60)); XOREQ(t1, SHR(u,  4));
-    
-        /* round 1 */
-        u = g[s1[1]       & 15]; XOREQ(t1, u);
-        u = g[s1[1] >>  4 & 15]; XOREQ(t1, SHL(u,  4)); XOREQ(t2, SHR(u, 60));
-        u = g[s1[1] >>  8 & 15]; XOREQ(t1, SHL(u,  8)); XOREQ(t2, SHR(u, 56));
-        u = g[s1[1] >> 12 & 15]; XOREQ(t1, SHL(u, 12)); XOREQ(t2, SHR(u, 52));
-        u = g[s1[1] >> 16 & 15]; XOREQ(t1, SHL(u, 16)); XOREQ(t2, SHR(u, 48));
-        u = g[s1[1] >> 20 & 15]; XOREQ(t1, SHL(u, 20)); XOREQ(t2, SHR(u, 44));
-        u = g[s1[1] >> 24 & 15]; XOREQ(t1, SHL(u, 24)); XOREQ(t2, SHR(u, 40));
-        u = g[s1[1] >> 28 & 15]; XOREQ(t1, SHL(u, 28)); XOREQ(t2, SHR(u, 36));
-        u = g[s1[1] >> 32 & 15]; XOREQ(t1, SHL(u, 32)); XOREQ(t2, SHR(u, 32));
-        u = g[s1[1] >> 36 & 15]; XOREQ(t1, SHL(u, 36)); XOREQ(t2, SHR(u, 28));
-        u = g[s1[1] >> 40 & 15]; XOREQ(t1, SHL(u, 40)); XOREQ(t2, SHR(u, 24));
-        u = g[s1[1] >> 44 & 15]; XOREQ(t1, SHL(u, 44)); XOREQ(t2, SHR(u, 20));
-        u = g[s1[1] >> 48 & 15]; XOREQ(t1, SHL(u, 48)); XOREQ(t2, SHR(u, 16));
-        u = g[s1[1] >> 52 & 15]; XOREQ(t1, SHL(u, 52)); XOREQ(t2, SHR(u, 12));
-        u = g[s1[1] >> 56 & 15]; XOREQ(t1, SHL(u, 56)); XOREQ(t2, SHR(u,  8));
-        u = g[s1[1] >> 60 & 15]; XOREQ(t1, SHL(u, 60)); XOREQ(t2, SHR(u,  4));
-        /* end */
-        /* store result */
-        _mm_storeu_si128((__m128i*)t, PXOR(t0, SHLD(t1, 64)));
-        _mm_storeu_si128((__m128i*)(t+2), PXOR(t2, SHRD(t1, 64)));
-#undef SHL
-#undef SHR
-#undef SHLD
-#undef SHRD
-#undef XOREQ
-#undef PXOR
-#undef PAND
+    gf2x_mul2(t, s1, s2);
 }
 
 /* *Mpfq::gf2n::squaring::code_for_sqr_ur */
diff --git a/fft/mpfq/x86_64/mpfq_2_64.h b/fft/mpfq/x86_64/mpfq_2_64.h
index a78c7ba..57421b8 100644
--- a/fft/mpfq/x86_64/mpfq_2_64.h
+++ b/fft/mpfq/x86_64/mpfq_2_64.h
@@ -3,6 +3,9 @@
 
 /* MPFQ generated file -- do not edit */
 
+#include "gf2x.h"
+#include "gf2x/gf2x-small.h"
+
 #include "mpfq.h"
 #include "mpfq_gf2n_common.h"
 #include <stdio.h>
@@ -11,9 +14,9 @@
 #include <assert.h>
 #include <stdint.h>
 #include <ctype.h>
-#include <emmintrin.h>
 #include <stddef.h>
 #include <stdio.h>
+
 #include "assert.h"
 #ifdef	MPFQ_LAST_GENERATED_TAG
 #undef	MPFQ_LAST_GENERATED_TAG
@@ -847,70 +850,7 @@ void mpfq_2_64_elt_ur_add(mpfq_2_64_dst_field K MAYBE_UNUSED, mpfq_2_64_dst_elt_
 static inline
 void mpfq_2_64_mul_ur(mpfq_2_64_dst_field K MAYBE_UNUSED, mpfq_2_64_dst_elt_ur t, mpfq_2_64_src_elt s1, mpfq_2_64_src_elt s2)
 {
-       unsigned long hi, lo;
-       unsigned long A[16];
-       unsigned long a = s2[0];
-       unsigned long b = s1[0];
-    
-       A[0] = 0;
-       A[1] = a;
-       A[2] = A[1] << 1;
-       A[3] = A[2] ^ A[1];
-       A[4] = A[2] << 1;
-       A[5] = A[4] ^ A[1];
-       A[6] = A[3] << 1;
-       A[7] = A[6] ^ A[1];
-       A[8] = A[4] << 1;
-       A[9] = A[8] ^ A[1];
-       A[10] = A[5] << 1;
-       A[11] = A[10] ^ A[1];
-       A[12] = A[6] << 1;
-       A[13] = A[12] ^ A[1];
-       A[14] = A[7] << 1;
-       A[15] = A[14] ^ A[1];
-    
-       lo = (A[b >> 60] << 4) ^ A[(b >> 56) & 15];
-       hi = lo >> 56;
-       lo = (lo << 8) ^ (A[(b >> 52) & 15] << 4) ^ A[(b >> 48) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 44) & 15] << 4) ^ A[(b >> 40) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 36) & 15] << 4) ^ A[(b >> 32) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 28) & 15] << 4) ^ A[(b >> 24) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 20) & 15] << 4) ^ A[(b >> 16) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 12) & 15] << 4) ^ A[(b >> 8) & 15];
-       hi = (hi << 8) | (lo >> 56);
-       lo = (lo << 8) ^ (A[(b >> 4) & 15] << 4) ^ A[b & 15];
-    
-       {
-         unsigned long tmp;
-         tmp = -((a >> 63) & 1);
-         tmp &= ((b & 0xfefefefefefefefe) >> 1);
-         hi = hi ^ tmp;
-         tmp = -((a >> 62) & 1);
-         tmp &= ((b & 0xfcfcfcfcfcfcfcfc) >> 2);
-         hi = hi ^ tmp;
-         tmp = -((a >> 61) & 1);
-         tmp &= ((b & 0xf8f8f8f8f8f8f8f8) >> 3);
-         hi = hi ^ tmp;
-         tmp = -((a >> 60) & 1);
-         tmp &= ((b & 0xf0f0f0f0f0f0f0f0) >> 4);
-         hi = hi ^ tmp;
-         tmp = -((a >> 59) & 1);
-         tmp &= ((b & 0xe0e0e0e0e0e0e0e0) >> 5);
-         hi = hi ^ tmp;
-         tmp = -((a >> 58) & 1);
-         tmp &= ((b & 0xc0c0c0c0c0c0c0c0) >> 6);
-         hi = hi ^ tmp;
-         tmp = -((a >> 57) & 1);
-         tmp &= ((b & 0x8080808080808080) >> 7);
-         hi = hi ^ tmp;
-       }
-       t[0] = lo;
-       t[1] = hi;
+    gf2x_mul1(t, s1[0], s2[0]);
 }
 
 /* *Mpfq::gf2n::squaring::code_for_sqr_ur */
