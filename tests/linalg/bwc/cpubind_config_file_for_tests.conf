# This file is only for tests. See linalg/bwc/cpubind.conf for the file
# which is supposed to contain real information, together with some doc.
# The present file is only supposed to have the bits and pieces which are
# useful to exert most of the functionality in the code.

# Note that this goes really in hand with test_cpubinding.c !!
#
# test_cpubinding.c does some extra parsing of the lines with EXPECT

[Socket:2 NUMANode:2 @merge_caches Core:6 @group_PU]
# EXPECT_FIND 2 3 Socket:2 NUMANode:2 Core:6 PU:2
# in this case, one half of the cores will be unused.
2x3 NUMANode=>2x1 Core=>1x3

# EXPECT_FIND 4 2 Socket:2 NUMANode:2 L2Cache:1 Core:6 PU:2
4x2 NUMANode=>2x1 Core=>2x1 Core*3=>1x2

# EXPECT_FAIL 2 2 Socket:2 NUMANode:2 L2Cache:1 Core:6 PU:2
# examples: parapluie

[Socket:2 @merge_caches Core:4 @group_PU]
# examples: griffon, paradent
# EXPECT_FIND 2 2 Socket:2 L2Cache:1 L1Cache:1 Core:4 PU:2
2x2 Core=>2x2
# EXPECT_FIND 2 4 Socket:2 L2Cache:1 L1Cache:1 Core:4 PU:2
2x4 Socket=>1x2 Core=>2x2

[NUMANode:4 Socket:1 @merge_caches Core:6 @group_PU]
# examples: barbecue
# EXPECT_FIND 2 3 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2
thr=2x3 Core=>2x3
# EXPECT_FIND 2 6 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2
thr=2x6 NUMANode=>1x2 Core=>2x3
# EXPECT_FIND 4 3 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2
thr=4x3 NUMANode=>2x1 Core=>2x3
# EXPECT_FIND 8 6 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2
thr=8x6 NUMANode=>2x2 Core=>2x3 PU*2=>2x1
# EXPECT_FIND 6 8 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2
thr=6x8 NUMANode=>2x2 Core=>3x2 PU*2=>1x2
# EXPECT_FAIL 3 4 NUMANode:4 Socket:1 L3Cache:1 L2Cache:6 Core:1 PU:2

[NUMANode:2 Socket:1 @merge_caches Core:8 @group_PU]
# examples: graphite
# examples: catrel, econome
# EXPECT_FIND 2 4 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 2 4 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=2x4 Core=>2x4
# EXPECT_FIND 4 2 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 4 2 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=4x2 Core=>4x2
# EXPECT_FIND 4 4 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 4 4 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=4x4 NUMANode=>1x2 Core=>4x2
# EXPECT_FIND 2 3 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 2 3 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=2x3 Core=>2x1 Core*4=>1x3
# EXPECT_FIND 4 3 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 4 3 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=4x3 NUMANode=>2x1 Core=>2x1 Core*4=>1x3
# EXPECT_FAIL 3 2 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FAIL 3 2 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
#
# This example is just to illustrate how it is possible to ask for CPU
# binding removal.
# EXPECT_FIND 3 3 NUMANode:2 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2
thr=3x3 remove


[NUMANode:3 Socket:1 @merge_caches Core:8 @group_PU]
# fictitious (as we probably don't want to do that for real):
# EXPECT_FIND 5 3 NUMANode:3 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:1 
# EXPECT_FIND 5 3 NUMANode:3 Socket:1 L3Cache:1 L2Cache:8 Core:1 PU:2 
thr=5x3 NUMANode=>1x3 Core*8=>5x1

[Socket:1 @merge_caches Core:4 @group_PU]
# examples: cassoulet, magret, graphene
# EXPECT_FIND 2 3 Socket:1 L3Cache:1 L2Cache:4 Core:1 PU:1
thr=2x3 Core=>2x1 Core*1=>1x3
# EXPECT_FIND 2 2 Socket:1 L3Cache:1 L2Cache:4 Core:1 PU:1
thr=2x2 Core=>2x2
# EXPECT_FAIL 4 4 Socket:1 L3Cache:1 L2Cache:4 Core:1 PU:1


[Socket:1 @merge_caches Core:2 @group_PU]
# examples: frite
# EXPECT_FIND 2 3 Socket:1 L2Cache:2 Core:1 PU:1 
# EXPECT_FIND 2 3 Socket:1 L2Cache:2 Core:1 PU:1 
thr=2x3 Core=>2x1 Core*1=>1x3

