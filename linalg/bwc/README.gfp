Inhomogeneous linear system solving over GF(p).
===============================================

In order to test this feature, please run the following tests:

    make check ARGS="-R inhomogeneous"

If it fails, then either there's a bug in cado-nfs, or your configuration
is not set to allow this code part to be build. Make sure that the cmake
output includes a line such as:

-- GF(p) implementations enabled for DL linear algebra: p_1;p_2;p_3;p_4;p_8;pz

(you need not have all of them, though). One implementation corresponding
to the word size of the prime you're working with must be included.


In order to test on the matrix you like, the following compilation
command should be issued (note that plingen_pz is not part of "make
all" ; bwc_full is, though).

    make bwc_full plingen_pz

Your matrix must be stored in binary format in a file, let's suppose it's
/tmp/matrix.bin ; format is 32-bit little-endian, each row as row length,
and for each non-zero coefficient in the row: row index, coefficient
value.

Row and column frequency files must be stored alongside your matrix.
Those can be build with
    $bindir/mf_scan  --binary-in --withcoeffs --mfile /tmp/matrix.bin --freq

Your right-hand side must be stored in binary format, in a file we'll
call /tmp/rhs.bin, for convention. You may have multi-dimensional rhs,
provided that your block Wiedemann block size is at least as large. The
file format is 32-bit little endian, row major, with as many 32-bit words
per entry as is necessary to store the prime number p itself.

The dimension of your rhs will have to be passed as an extra parameter.

You need to call bwc.pl with a command line similar to the following:

    $bindir/linalg/bwc/bwc.pl :complete                                 \
        prime=1009 matrix=/tmp/matrix.bin rhs=/tmp/rhs.bin  nrhs=3      \
            nullspace=right                                             \
            mpi=1x1 thr=2x2                                             \
            m=4 n=4                                                     \
            wdir=/tmp/bwc

The script eventually outputs three solution vectors in files named
K.sols* ; those are vectors such that the equation (M||RHS)*x=0 holds.
The number of solution vectors produced is equal to the dimension of the
right-hand side.
