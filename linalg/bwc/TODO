
This lists some acknowledged bugs that ought to be fixed.

 * some reorganization is desired. Several aspects are considered.
   - I should have a notion of "preferred I/O width", regarding how many
     coefficients are stored together in a data file. This is thought as
     being 64 for binary, and 1 for GF(p), and essentially unchangeable.
     This should not preclude the possibility to run an e.g. 128-bit wide
     code using SSE-2 for arithmetic. However, this does imply that such
     code would have to read 2 files instead of one appropriately crafted
     one. Consequences:
      --> implies changing the vector I/O routines (down to pi_load_file*
          routines) to accomodate the fact that we may read from
          *several* vectors
      --> get rid of the split program
      --> get rid of the Y file
      --> get rid of the global F file
   - filename-based data shows its limits. Rather than passing ys=x..y to
     binaries, specifying the V file to start from is in fact a pretty
     workable solution. For example krylov would have to match against
     ".\d+$" for detecting the iteration number, create the next file,
     and create the A file based on the V file name.
   - acollect should go, too. This would be eased by the "preferred I/O
     width change", as we would then enforce a much simpler control for
     what acollect currently does.
   - bwc.pl recursive control loop is really crazy, this has to go. The
     script in itself should probably be converted to something in
     python.
   This reorganization should leave us with only V, A, F, and S files.

 * binary lingen is slow. Deserves a complete rewrite.

 * Tuning for the assembly routines for the matrix multiplication has
   never been done. Doing this properly should get a speed-up. Likewise,
   the assembly code can certainly be improved. Perhaps auto-detect cache
   sizes ?


Also some done items.

 [done] code in matops.c and abase-binary-dotprod-backends.h is sometimes
        duplicated. This should be factored.
        [abase-binary-dotprod-backends.h is dead now, and the
        corresponding code has been factored in a layer inside mpfq which
        automatically generates the required code]
        [Mon Mar 21 15:54:53 2011, svn 749]

 [done] prep.c supports some sort of seeding. Unfortunately, this is
        ineffective in multithreaded context.
        [we resort to saving a binary blob, which is uniquely determined
        by the seed, and later on re-read it as a vector]
        [Sun Nov 28 22:17:59 2010, svn 508]

